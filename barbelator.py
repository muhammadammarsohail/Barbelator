# -*- coding: utf-8 -*-
"""Barbelator

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hiMeuxc1PKFrzWfYAHOLIX6C3WsJLmug

# Single Server Quying System

### Overall Project Architecture

> ### Coding Paradigm
>- [ ] OOP
- [x] Functional
- [ ] Scripting

> ### Unit of time
>- [X] Minutes

> ### State of the server will be validated using boolean values

> ### Randomness will be achieved using psedou random generator first and will be proceeded by adding the last generated randomnunmber to the curently generated number.

> ### Values to be noted
>- [x] Arrival Time = $t_{i}$ 
- [x] Inter arrival time = $A_{i}$ = $t_{i} - t_{i-1}$
- [x] Waiting in queue = $W_{i}$ = 
- [x] Service time = $S_{i}$ = 
- [x] Completion(Departure) Time =  $D_{i}$ =
"""



"""### All Imports"""

import random
from time import sleep

"""### Generating Arrival and Service Time, $t_{i}$ , $S_{i}$

> Indented block


"""

def generateArrivalAndServiceTime():
    global arrivalTime,serviceTime
    for i in range(0,10):
        if i : 
            arrivalTimeTemp = random.randint(1,5) + arrivalTime[i-1]
        else: 
            arrivalTimeTemp = random.randint(1,5)
        serviceTimeTemp = random.randint(6,10)
        # print("Arrival time: "+ str(arrivalTime) + " Service time: "+ str(serviceTime))
        arrivalTime.append(arrivalTimeTemp)
        serviceTime.append(serviceTimeTemp)

"""### Calculating Inter Arrival Time $A_{i}$"""

def calculateInterArrivalTime():
    global arrivalTime
    for i in range(len(arrivalTime)):
        if i:
            temp = arrivalTime[i] - arrivalTime[i-1] 
        else:
            temp = arrivalTime[i]
        # print("Inter Arrival time for " +str(i+1) +" event: " + str(temp))

"""### Calculating Waiting Time"""

def calculateWaitingTime(i):
    # global queue
    global waitingTime,serverIsBusy,completionTime,arrivalTime

    if serverIsBusy:
        waitingTime.append(completionTime[i-1]-arrivalTime[i])
        
    else:
        waitingTime.append(0)
        serverIsBusy=True

"""

```
# This is formatted as code
```

### Calculating Completion Time"""

def calculateCompletionTime(i):
    global completionTime,waitingTime,arrivalTime

    completionTime.append(arrivalTime[i]+serviceTime[i]+waitingTime[i])
    # printEventDetails(i)
    # print(str(completionTime[i])+" , completion time\n")

"""```
# This is formatted as code
```

## Print Details
"""

def printEventDetails(i):
    global arrivalTime,serviceTime,waitingTime,completionTime
    print("\nArrival Time:" + str(arrivalTime[i]) +"\n Service Time: " + str(serviceTime[i]) +"\n Waiting Time:" +str(waitingTime[i])+"\nCompletion time: " +str(completionTime[i]))

"""## Calculations"""

def Calculations():
    global serverIsBusy,arrivalTime,serviceTime,waitingTime,completionTime
    generateArrivalAndServiceTime()
    
    calculateInterArrivalTime()
    for i in range(len(arrivalTime)):
        calculateWaitingTime(i)
        calculateCompletionTime(i)
    serverIsBusy=False

"""# Simulation"""

def simulateSingleServerQueuingSystem(): 
    global clock,queue,event,serverIsBusy
    currentArrival=0
    inServer = 1
    print("Clock \t Event \t Status \t i \t ti \t Ci \tQPopulation \t\t State")
    print(str(0)+" \t "+str(0)+" \t "+"Start"+" \t\t "+"--"+" \t "+"--"+"\t"+"--"+" \t "+str(0)+" \t\t\t "+"Idle")

    while clock is not 120 and queue <= 10:
        sleep(1)

        if clock in arrivalTime:
            event+=1
            currentArrival+=1
            if serverIsBusy == False:
                serverIsBusy=True
            else:
                queue+=1
            generateReport("arrival",currentArrival-1)
        
        if clock in completionTime:
            event+=1
            if queue ==0:
                serverIsBusy = False
                generateReport("completion",inServer-1)  

            else:
                queue-=1
                generateReport("completion",inServer-1)  
                inServer +=1

        clock+=1
        
    print("\nSimulation End") if queue != 11 else print("Error: Queue is full")

"""# Report Generation"""

def generateReport(status,i):
    global event,clock,arrivalTime,completionTime,queue,serverIsBusy
    if status=="arrival":
        print(str(clock)+" \t "+str(event)+" \t "+str(status)+" \t "+str(i+1)+" \t "+str(arrivalTime[i])+"\t"+"--"+" \t "+str(queue)+" \t\t\t "+str("Busy" if serverIsBusy else "Idle"))

    else:
        print(str(clock)+" \t "+str(event)+" \t "+str(status)+" \t "+str(i+1)+" \t "+"--\t"+str(completionTime[i])+" \t "+str(queue)+" \t\t\t "+str("Busy" if serverIsBusy else "Idle"))

    # Clock Event Status i ti Ci QueuePopulation state

    pass

"""## Main Execution"""

if __name__ == "__main__":
    arrivalTime=[]                  #
    serviceTime=[]                  #
    serverIsBusy = False            #   GLOBAL VARIABLES
    waitingTime=[]                  #
    completionTime=[]               #
    Calculations()

    clock = 0
    queue = 0 #count of waiting entities
    event = 0
    simulateSingleServerQueuingSystem()

    # ====================== Simulation End ====================

